{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jblair\\\\Desktop\\\\React\\\\sitehawk-communicator-ui\\\\src\\\\components\\\\chemical-area-ledger\\\\chemical-area-ledger.js\";\nimport React from \"react\";\nimport { TreeView, processTreeViewItems, handleTreeViewCheckChange, moveTreeViewItem, TreeViewDragAnalyzer, TreeViewDragClue } from '@progress/kendo-react-treeview';\nimport { SegmentedControl } from 'segmented-control-react';\nimport '@progress/kendo-react-animation';\nimport \"../chemical-area-ledger/chemical-area-ledger.css\";\nimport \"../../styles/ledgers/ledgers.css\";\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nclass ChemicalAreaLedger extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = index => {\n      this.setState({\n        selected: `${parseInt(index)}`\n      });\n    };\n\n    const segments = [{\n      name: 'Tiles'\n    }, {\n      name: 'TreeView'\n    }];\n    this.state = {\n      chemicalAreas: [],\n      chemicalAreasHierarchy: [],\n      segments: segments,\n      selected: 0\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.getChemicalAreas(233, 1, 100);\n  }\n\n  async getChemicalAreas(facilityId, pageIndex, pageSize) {\n    await fetch(`/api/v1/Facility/${facilityId}/ChemicalAreas?pageIndex=${pageIndex}&pageSize=${pageSize}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + localStorage.getItem('token'),\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      data.forEach(chemicalArea => {\n        chemicalArea.name = chemicalArea.name + ' - ' + chemicalArea.type.location;\n        chemicalArea.items = myChemicalAreas.filter(function (item) {\n          return item.parentChemicalAreaId === chemicalArea.id;\n        });\n      }); // var parents = data.filter(function (item) {\n      //   return item.parentChemicalAreaId === 0;\n      // });\n      // var children = data.filter(function (item) {\n      //   return item.parentChemicalAreaId > 0;\n      // });\n      // var items = [];\n      // parents.forEach(parent => {\n      //   items = children.filter(function(item) {\n      //     return item.parentChemicalAreaId === parent.id;\n      //   });\n      //   parent.name = parent.name + ' - ' + parent.type.location;\n      //   parent.items = items;\n      //   var subitems = [];\n      //   parent.items.forEach(subitem => {\n      //     subitems = children.filter(function(myItem) {\n      //       return myItem.parentChemicalAreaId === subitem.id;\n      //     });\n      //     subitem.name = subitem.name + ' - ' + subitem.type.location;\n      //     subitem.items = subitems;\n      //     subitems = [];\n      //   });\n      //   items = [];\n      // });\n\n      var treeviewData = data;\n      this.setState({\n        chemicalAreas: data,\n        chemicalAreaTreeView: treeviewData\n      });\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }\n\n  render() {\n    function ChemicalAreaCards(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, props.chemicalAreas.map((myChemicalArea, index) => React.createElement(\"div\", {\n        key: index,\n        className: \"card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, myChemicalArea.name), React.createElement(\"h6\", {\n        className: \"card-subtitle mb-2 text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, myChemicalArea.description), React.createElement(\"p\", {\n        className: \"card-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Use: \", myChemicalArea.areaOfUse.areaOfUse)))));\n    }\n\n    function ChemicalAreaTreeView(props) {\n      function onExpandChange(event) {\n        event.item.expanded = !event.item.expanded;\n      }\n\n      return React.createElement(TreeView, {\n        data: props.treeViewData,\n        textField: \"name\",\n        expandIcons: true,\n        onExpandChange: onExpandChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      });\n    }\n\n    function loadChemicalAreaView(props) {\n      switch (parseInt(props.selected)) {\n        case 0:\n          return React.createElement(ChemicalAreaCards, {\n            chemicalAreas: props.chemicalAreas,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          });\n          break;\n\n        case 1:\n          return React.createElement(ChemicalAreaTreeView, {\n            treeViewData: props.chemicalAreaTreeView,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          });\n          break;\n\n        default:\n          return React.createElement(ChemicalAreaCards, {\n            chemicalAreas: props.chemicalAreas,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          });\n          break;\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"chemicalAreaLedgerHeader\",\n      className: \"ledgerTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Chemical Area Ledger\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(SegmentedControl, {\n      segments: this.state.segments,\n      selected: parseInt(this.state.selected),\n      variant: \"base\",\n      onChangeSegment: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, loadChemicalAreaView(this.state)));\n  }\n\n}\n\nexport default ChemicalAreaLedger;","map":{"version":3,"sources":["C:/Users/jblair/Desktop/React/sitehawk-communicator-ui/src/components/chemical-area-ledger/chemical-area-ledger.js"],"names":["React","TreeView","processTreeViewItems","handleTreeViewCheckChange","moveTreeViewItem","TreeViewDragAnalyzer","TreeViewDragClue","SegmentedControl","ChemicalAreaLedger","Component","constructor","props","handleChange","index","setState","selected","parseInt","segments","name","state","chemicalAreas","chemicalAreasHierarchy","bind","componentDidMount","getChemicalAreas","facilityId","pageIndex","pageSize","fetch","method","headers","localStorage","getItem","then","response","json","data","forEach","chemicalArea","type","location","items","myChemicalAreas","filter","item","parentChemicalAreaId","id","treeviewData","chemicalAreaTreeView","catch","error","console","render","ChemicalAreaCards","map","myChemicalArea","description","areaOfUse","ChemicalAreaTreeView","onExpandChange","event","expanded","treeViewData","loadChemicalAreaView"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { TreeView, processTreeViewItems, handleTreeViewCheckChange, \r\n    moveTreeViewItem, TreeViewDragAnalyzer, TreeViewDragClue } from '@progress/kendo-react-treeview'\r\nimport { SegmentedControl } from 'segmented-control-react';\r\nimport '@progress/kendo-react-animation'\r\n\r\nimport \"../chemical-area-ledger/chemical-area-ledger.css\";\r\nimport \"../../styles/ledgers/ledgers.css\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\"\r\n\r\n\r\nclass ChemicalAreaLedger extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const segments = [\r\n      { name: 'Tiles' },\r\n      { name: 'TreeView' }\r\n    ];\r\n\r\n    this.state = {\r\n      chemicalAreas: [],\r\n      chemicalAreasHierarchy: [],\r\n      segments: segments,\r\n      selected: 0\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange = (index) => {\r\n    this.setState({selected: `${parseInt(index)}`});\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getChemicalAreas(233, 1, 100);\r\n  }\r\n\r\n  async getChemicalAreas(facilityId, pageIndex, pageSize) {\r\n    await fetch(`/api/v1/Facility/${facilityId}/ChemicalAreas?pageIndex=${pageIndex}&pageSize=${pageSize}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('token'),\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      data.forEach(chemicalArea => {\r\n        chemicalArea.name = chemicalArea.name + ' - ' + chemicalArea.type.location;\r\n        chemicalArea.items = myChemicalAreas.filter(function(item) {\r\n          return item.parentChemicalAreaId === chemicalArea.id;\r\n        });\r\n      });\r\n\r\n      // var parents = data.filter(function (item) {\r\n      //   return item.parentChemicalAreaId === 0;\r\n      // });\r\n      // var children = data.filter(function (item) {\r\n      //   return item.parentChemicalAreaId > 0;\r\n      // });\r\n\r\n      // var items = [];\r\n      // parents.forEach(parent => {\r\n      //   items = children.filter(function(item) {\r\n      //     return item.parentChemicalAreaId === parent.id;\r\n      //   });\r\n\r\n      //   parent.name = parent.name + ' - ' + parent.type.location;\r\n      //   parent.items = items;\r\n\r\n      //   var subitems = [];\r\n      //   parent.items.forEach(subitem => {\r\n      //     subitems = children.filter(function(myItem) {\r\n      //       return myItem.parentChemicalAreaId === subitem.id;\r\n      //     });\r\n  \r\n      //     subitem.name = subitem.name + ' - ' + subitem.type.location;\r\n      //     subitem.items = subitems;\r\n      //     subitems = [];\r\n      //   });\r\n\r\n\r\n      //   items = [];\r\n      // });\r\n\r\n      var treeviewData = data;\r\n\r\n      this.setState({\r\n        chemicalAreas: data,\r\n        chemicalAreaTreeView: treeviewData,\r\n      })\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error:', error);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    function ChemicalAreaCards(props) {\r\n      return (\r\n        <div>\r\n            {props.chemicalAreas.map((myChemicalArea, index) => (\r\n              <div key={index} className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">{myChemicalArea.name}</h5>\r\n                  <h6 className=\"card-subtitle mb-2 text-muted\">{myChemicalArea.description}</h6>\r\n                  <p className=\"card-text\">Use: {myChemicalArea.areaOfUse.areaOfUse}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n    function ChemicalAreaTreeView(props) {\r\n      function onExpandChange(event) {\r\n        event.item.expanded = !event.item.expanded;\r\n      }\r\n      return (\r\n        <TreeView\r\n            data={props.treeViewData}\r\n            textField=\"name\"\r\n            expandIcons={true}\r\n            onExpandChange={onExpandChange}\r\n        />\r\n      )\r\n    }\r\n\r\n    function loadChemicalAreaView(props) {\r\n      switch(parseInt(props.selected)) {\r\n        case 0: \r\n          return <ChemicalAreaCards chemicalAreas={props.chemicalAreas} />;\r\n          break;\r\n        case 1:\r\n          return <ChemicalAreaTreeView treeViewData={props.chemicalAreaTreeView} />;\r\n          break;\r\n        default:\r\n          return <ChemicalAreaCards chemicalAreas={props.chemicalAreas} />;\r\n          break;\r\n      }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"content\">\r\n        <div id=\"chemicalAreaLedgerHeader\" className=\"ledgerTitle\">Chemical Area Ledger</div>\r\n        <br/>\r\n        <SegmentedControl\r\n            segments={this.state.segments}\r\n            selected={parseInt(this.state.selected)} \r\n            variant=\"base\"\r\n            onChangeSegment={this.handleChange}           \r\n        />    \r\n        <br/>\r\n        <div>\r\n        {loadChemicalAreaView(this.state)}\r\n        </div>  \r\n        </div>\r\n    )\r\n  }\r\n} \r\n\r\nexport default ChemicalAreaLedger;"]},"metadata":{},"sourceType":"module"}