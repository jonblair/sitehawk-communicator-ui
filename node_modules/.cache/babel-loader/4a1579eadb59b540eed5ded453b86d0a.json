{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jblair\\\\Desktop\\\\React\\\\sitehawk-communicator-ui\\\\src\\\\components\\\\chemical-area-ledger\\\\chemical-area-ledger.js\";\nimport React from \"react\";\nimport { TreeView, processTreeViewItems, handleTreeViewCheckChange, moveTreeViewItem, TreeViewDragAnalyzer, TreeViewDragClue } from '@progress/kendo-react-treeview';\nimport { SegmentedControl } from 'segmented-control-react';\nimport '@progress/kendo-react-animation';\nimport \"../chemical-area-ledger/chemical-area-ledger.css\";\nimport \"../../styles/ledgers/ledgers.css\";\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nclass ChemicalAreaLedger extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.AddTreeView = () => {\n      var toggler = document.getElementsByClassName(\"caret\");\n      var i;\n\n      for (i = 0; i < toggler.length; i++) {\n        toggler[i].addEventListener(\"click\", function () {\n          this.parentElement.querySelector(\".nested\").classList.toggle(\"active\");\n          this.classList.toggle(\"caret-down\");\n        });\n      }\n\n      ;\n    };\n\n    this.handleChange = index => {\n      this.setState({\n        selected: `${parseInt(index)}`\n      });\n    };\n\n    const segments = [{\n      name: 'Tiles'\n    }, {\n      name: 'TreeView'\n    }];\n    this.state = {\n      chemicalAreas: [],\n      chemicalAreasHierarchy: [],\n      segments: segments,\n      selected: 0\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.getChemicalAreas(233, 1, 100);\n    this.AddTreeView();\n  }\n\n  async getChemicalAreas(facilityId, pageIndex, pageSize) {\n    await fetch(`/api/v1/Facility/${facilityId}/ChemicalAreas?pageIndex=${pageIndex}&pageSize=${pageSize}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + localStorage.getItem('token'),\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      var parents = data.filter(function (item) {\n        return item.parentChemicalAreaId === 0;\n      });\n      var treeviewData = parents;\n      var children = data.filter(function (item) {\n        return item.parentChemicalAreaId > 0;\n      });\n      treeviewData.forEach(parent => {\n        children.forEach(child => {\n          if (child.parentChemicalAreaId === parent.id) {\n            parent.items = child;\n            parent.expanded = true;\n          }\n        });\n      });\n      this.setState({\n        chemicalAreas: data,\n        chemicalAreaTreeView: treeviewData\n      });\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }\n\n  render() {\n    function ChemicalAreaCards(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, props.chemicalAreas.map((myChemicalArea, index) => React.createElement(\"div\", {\n        key: index,\n        className: \"card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, myChemicalArea.name), React.createElement(\"h6\", {\n        className: \"card-subtitle mb-2 text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, myChemicalArea.description), React.createElement(\"p\", {\n        className: \"card-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Use: \", myChemicalArea.areaOfUse.areaOfUse)))));\n    }\n\n    function ChemicalAreaTreeView(props) {\n      // function onExpandChange(event) {\n      //     event.item.expanded = !event.item.expanded;\n      //     this.forceUpdate();\n      // }\n      return (// <TreeView\n        //     data={props.chemicalAreasTreeViewData}\n        //     textField=\"name\"\n        //     expandIcons={true}\n        //     onExpandChange={onExpandChange}\n        // />\n        React.createElement(\"ul\", {\n          id: \"myUL\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          class: \"caret\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, \"Beverages\"), React.createElement(\"ul\", {\n          class: \"nested\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, \"Water\"), React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, \"Coffee\"), React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          class: \"caret\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, \"Tea\"), React.createElement(\"ul\", {\n          class: \"nested\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, \"Black Tea\"), React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, \"White Tea\"), React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          class: \"caret\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, \"Green Tea\"), React.createElement(\"ul\", {\n          class: \"nested\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, \"Sencha\"), React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, \"Gyokuro\"), React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, \"Matcha\"), React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, \"Pi Lo Chun\"))))))))\n      );\n    }\n\n    function loadChemicalAreaView(props) {\n      switch (parseInt(props.selected)) {\n        case 0:\n          return React.createElement(ChemicalAreaCards, {\n            chemicalAreas: props.chemicalAreas,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            },\n            __self: this\n          });\n          break;\n\n        case 1:\n          return React.createElement(ChemicalAreaTreeView, {\n            chemicalAreasTreeViewData: props.chemicalAreaTreeView,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152\n            },\n            __self: this\n          });\n          break;\n\n        default:\n          return React.createElement(ChemicalAreaCards, {\n            chemicalAreas: props.chemicalAreas,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155\n            },\n            __self: this\n          });\n          break;\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"chemicalAreaLedgerHeader\",\n      className: \"ledgerTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Chemical Area Ledger\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(SegmentedControl, {\n      segments: this.state.segments,\n      selected: parseInt(this.state.selected),\n      variant: \"base\",\n      onChangeSegment: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, loadChemicalAreaView(this.state)));\n  }\n\n}\n\nexport default ChemicalAreaLedger;","map":{"version":3,"sources":["C:/Users/jblair/Desktop/React/sitehawk-communicator-ui/src/components/chemical-area-ledger/chemical-area-ledger.js"],"names":["React","TreeView","processTreeViewItems","handleTreeViewCheckChange","moveTreeViewItem","TreeViewDragAnalyzer","TreeViewDragClue","SegmentedControl","ChemicalAreaLedger","Component","constructor","props","AddTreeView","toggler","document","getElementsByClassName","i","length","addEventListener","parentElement","querySelector","classList","toggle","handleChange","index","setState","selected","parseInt","segments","name","state","chemicalAreas","chemicalAreasHierarchy","bind","componentDidMount","getChemicalAreas","facilityId","pageIndex","pageSize","fetch","method","headers","localStorage","getItem","then","response","json","data","parents","filter","item","parentChemicalAreaId","treeviewData","children","forEach","parent","child","id","items","expanded","chemicalAreaTreeView","catch","error","console","render","ChemicalAreaCards","map","myChemicalArea","description","areaOfUse","ChemicalAreaTreeView","loadChemicalAreaView"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { TreeView, processTreeViewItems, handleTreeViewCheckChange, \r\n    moveTreeViewItem, TreeViewDragAnalyzer, TreeViewDragClue } from '@progress/kendo-react-treeview'\r\nimport { SegmentedControl } from 'segmented-control-react';\r\nimport '@progress/kendo-react-animation'\r\n\r\nimport \"../chemical-area-ledger/chemical-area-ledger.css\";\r\nimport \"../../styles/ledgers/ledgers.css\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\"\r\n\r\n\r\nclass ChemicalAreaLedger extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const segments = [\r\n      { name: 'Tiles' },\r\n      { name: 'TreeView' }\r\n    ];\r\n\r\n    this.state = {\r\n      chemicalAreas: [],\r\n      chemicalAreasHierarchy: [],\r\n      segments: segments,\r\n      selected: 0\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  AddTreeView = () => {\r\n    var toggler = document.getElementsByClassName(\"caret\");\r\n    var i;\r\n\r\n    for (i = 0; i < toggler.length; i++) {\r\n      toggler[i].addEventListener(\"click\", function() {\r\n        this.parentElement.querySelector(\".nested\").classList.toggle(\"active\");\r\n        this.classList.toggle(\"caret-down\");\r\n      });\r\n    };\r\n  }\r\n\r\n  handleChange = (index) => {\r\n    this.setState({selected: `${parseInt(index)}`});\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getChemicalAreas(233, 1, 100);\r\n    this.AddTreeView();\r\n  }\r\n\r\n  async getChemicalAreas(facilityId, pageIndex, pageSize) {\r\n    await fetch(`/api/v1/Facility/${facilityId}/ChemicalAreas?pageIndex=${pageIndex}&pageSize=${pageSize}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('token'),\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      var parents = data.filter(function (item) {\r\n        return item.parentChemicalAreaId === 0;\r\n      });\r\n      var treeviewData = parents;\r\n\r\n      var children = data.filter(function (item) {\r\n        return item.parentChemicalAreaId > 0;\r\n      });\r\n\r\n      treeviewData.forEach(parent => {\r\n        children.forEach(child => {\r\n          if (child.parentChemicalAreaId === parent.id) {\r\n            parent.items = child;\r\n            parent.expanded= true;\r\n          }\r\n        });\r\n      });\r\n\r\n      this.setState({\r\n        chemicalAreas: data,\r\n        chemicalAreaTreeView: treeviewData,\r\n      })\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error:', error);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    function ChemicalAreaCards(props) {\r\n      return (\r\n        <div>\r\n            {props.chemicalAreas.map((myChemicalArea, index) => (\r\n              <div key={index} className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">{myChemicalArea.name}</h5>\r\n                  <h6 className=\"card-subtitle mb-2 text-muted\">{myChemicalArea.description}</h6>\r\n                  <p className=\"card-text\">Use: {myChemicalArea.areaOfUse.areaOfUse}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n    function ChemicalAreaTreeView(props) {\r\n      // function onExpandChange(event) {\r\n      //     event.item.expanded = !event.item.expanded;\r\n      //     this.forceUpdate();\r\n      // }\r\n      return (\r\n        // <TreeView\r\n        //     data={props.chemicalAreasTreeViewData}\r\n        //     textField=\"name\"\r\n        //     expandIcons={true}\r\n        //     onExpandChange={onExpandChange}\r\n        // />\r\n\r\n        <ul id=\"myUL\">\r\n          <li><span class=\"caret\">Beverages</span>\r\n            <ul class=\"nested\">\r\n              <li>Water</li>\r\n              <li>Coffee</li>\r\n              <li><span class=\"caret\">Tea</span>\r\n                <ul class=\"nested\">\r\n                  <li>Black Tea</li>\r\n                  <li>White Tea</li>\r\n                  <li><span class=\"caret\">Green Tea</span>\r\n                    <ul class=\"nested\">\r\n                      <li>Sencha</li>\r\n                      <li>Gyokuro</li>\r\n                      <li>Matcha</li>\r\n                      <li>Pi Lo Chun</li>\r\n                    </ul>\r\n                  </li>\r\n                </ul>\r\n              </li>  \r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      )\r\n    }\r\n\r\n    function loadChemicalAreaView(props) {\r\n      switch(parseInt(props.selected)) {\r\n        case 0: \r\n          return <ChemicalAreaCards chemicalAreas={props.chemicalAreas} />;\r\n          break;\r\n        case 1:\r\n          return <ChemicalAreaTreeView chemicalAreasTreeViewData={props.chemicalAreaTreeView} />;\r\n          break;\r\n        default:\r\n          return <ChemicalAreaCards chemicalAreas={props.chemicalAreas} />;\r\n          break;\r\n      }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"content\">\r\n        <div id=\"chemicalAreaLedgerHeader\" className=\"ledgerTitle\">Chemical Area Ledger</div>\r\n        <br/>\r\n        <SegmentedControl\r\n            segments={this.state.segments}\r\n            selected={parseInt(this.state.selected)} \r\n            variant=\"base\"\r\n            onChangeSegment={this.handleChange}           \r\n        />    \r\n        <br/>\r\n        <div>\r\n        {loadChemicalAreaView(this.state)}\r\n        </div>  \r\n        </div>\r\n    )\r\n  }\r\n} \r\n\r\nexport default ChemicalAreaLedger;"]},"metadata":{},"sourceType":"module"}