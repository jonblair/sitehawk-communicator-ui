{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { saveAs } from '@progress/kendo-file-saver';\nimport { workbookOptions, toDataURL, isWorkbookOptions } from './ooxml/workbook';\n\nvar ExcelExport =\n/** @class */\nfunction (_super) {\n  __extends(ExcelExport, _super);\n\n  function ExcelExport(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.saveFile = function (dataURL) {\n      saveAs(dataURL, _this.props.fileName, {\n        forceProxy: _this.props.forceProxy,\n        proxyURL: _this.props.proxyURL\n      });\n    };\n\n    _this.extractColumns = function (children, level) {\n      if (level === void 0) {\n        level = 0;\n      }\n\n      return Array.isArray(children) ? children.map(function (child) {\n        return _this.extractChild(child, level);\n      }) : [children, _this.extractChild(children, level)];\n    };\n\n    _this.extractChild = function (child, level) {\n      if (level === void 0) {\n        level = 0;\n      }\n\n      return React.isValidElement(child) ? __assign({}, child.props, {\n        width: child.props.width && parseInt(\"\" + child.props.width, 10),\n        level: level,\n        children: child.props.children && _this.extractColumns(child.props.children, level + 1)\n      }) : __assign({}, child, {\n        level: level,\n        children: child.children && _this.extractColumns(child.children, level + 1)\n      });\n    };\n\n    _this.getExportData = function (exportData) {\n      var result;\n\n      if (exportData) {\n        if (Array.isArray(exportData)) {\n          result = {\n            data: exportData\n          };\n        } else {\n          result = exportData;\n        }\n      } else {\n        result = {\n          data: _this.props.data,\n          group: _this.props.group\n        };\n      }\n\n      return result;\n    };\n\n    _this.save = _this.save.bind(_this);\n    _this.toDataURL = _this.toDataURL.bind(_this);\n    _this.workbookOptions = _this.workbookOptions.bind(_this);\n    return _this;\n  }\n  /**\n   * Saves the data to Excel.\n   *\n   * @param exportData - An optional parameter. Can be the data that will be exported or the [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).\n   * @param columns - An optional parameter. If present, it will be used instead of the columns prop or the child column components.\n   */\n\n\n  ExcelExport.prototype.save = function (exportData, columns) {\n    this.toDataURL(exportData, columns).then(this.saveFile);\n  };\n  /**\n   * Returns a promise which will be resolved with the file data URI.\n   *\n   * @param exportData - The optional data or the [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that will be used to generate the data URI.\n   * @param externalColumns - The optional columns that will be used.\n   * @returns {Promise<string>} - The promise that will be resolved by the file data URI.\n   */\n\n\n  ExcelExport.prototype.toDataURL = function (exportData, columns) {\n    var options = isWorkbookOptions(exportData) ? exportData : this.workbookOptions(exportData, columns);\n    return toDataURL(options);\n  };\n  /**\n   * Based on the specified columns and data, returns [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).\n   *\n   * @param exportData - The optional data that will be exported.\n   * @param externalColumns - The optional columns that will be used.\n   * @returns {WorkbookOptions} - The workbook options.\n   */\n  // tslint:enable:max-line-length\n\n\n  ExcelExport.prototype.workbookOptions = function (exportData, externalColumns) {\n    var currentData = this.getExportData(exportData);\n    var children = this.props.children;\n    var gridColumns = children && children.type && children.type.displayName === 'KendoReactGrid' && children.props && React.Children.toArray(children.props.children);\n    var columns = this.extractColumns(gridColumns || externalColumns || this.props.columns || React.Children.toArray(children));\n    var options = workbookOptions({\n      columns: columns,\n      data: currentData.data,\n      group: currentData.group,\n      filterable: this.props.filterable,\n      creator: this.props.creator,\n      date: this.props.date,\n      dir: this.props.dir,\n      paddingCellOptions: this.props.paddingCellOptions,\n      headerPaddingCellOptions: this.props.headerPaddingCellOptions\n    });\n    return options;\n  };\n  /**\n   * @hidden\n   */\n\n\n  ExcelExport.prototype.render = function () {\n    return this.props.children || null;\n  };\n  /**\n   * @hidden\n   */\n\n\n  ExcelExport.propTypes = {\n    children: PropTypes.any,\n    columns: PropTypes.arrayOf(PropTypes.any),\n    creator: PropTypes.string,\n    data: PropTypes.any,\n    date: PropTypes.any,\n    filterable: PropTypes.bool,\n    fileName: PropTypes.string,\n    forceProxy: PropTypes.bool,\n    group: PropTypes.any,\n    headerPaddingCellOptions: PropTypes.any,\n    paddingCellOptions: PropTypes.any,\n    proxyURL: PropTypes.string,\n    dir: PropTypes.string\n  };\n  /**\n   * @hidden\n   */\n\n  ExcelExport.defaultProps = {\n    fileName: 'Export.xlsx',\n    forceProxy: false\n  };\n  return ExcelExport;\n}(React.Component);\n\nexport default ExcelExport;","map":{"version":3,"sources":["../../src/ExcelExport.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { saveAs } from '@progress/kendo-file-saver';\nimport { workbookOptions, toDataURL, isWorkbookOptions } from './ooxml/workbook';\nvar ExcelExport = /** @class */ (function (_super) {\n    __extends(ExcelExport, _super);\n    function ExcelExport(props) {\n        var _this = _super.call(this, props) || this;\n        _this.saveFile = function (dataURL) {\n            saveAs(dataURL, _this.props.fileName, {\n                forceProxy: _this.props.forceProxy,\n                proxyURL: _this.props.proxyURL\n            });\n        };\n        _this.extractColumns = function (children, level) {\n            if (level === void 0) { level = 0; }\n            return Array.isArray(children)\n                ? children.map(function (child) {\n                    return _this.extractChild(child, level);\n                })\n                : [children, _this.extractChild(children, level)];\n        };\n        _this.extractChild = function (child, level) {\n            if (level === void 0) { level = 0; }\n            return React.isValidElement(child)\n                ? __assign({}, child.props, { width: child.props.width && parseInt(\"\" + child.props.width, 10), level: level, children: child.props.children\n                        && _this.extractColumns(child.props.children, level + 1) }) : __assign({}, child, { level: level, children: child.children && _this.extractColumns(child.children, level + 1) });\n        };\n        _this.getExportData = function (exportData) {\n            var result;\n            if (exportData) {\n                if (Array.isArray(exportData)) {\n                    result = {\n                        data: exportData\n                    };\n                }\n                else {\n                    result = exportData;\n                }\n            }\n            else {\n                result = {\n                    data: _this.props.data,\n                    group: _this.props.group\n                };\n            }\n            return result;\n        };\n        _this.save = _this.save.bind(_this);\n        _this.toDataURL = _this.toDataURL.bind(_this);\n        _this.workbookOptions = _this.workbookOptions.bind(_this);\n        return _this;\n    }\n    /**\n     * Saves the data to Excel.\n     *\n     * @param exportData - An optional parameter. Can be the data that will be exported or the [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).\n     * @param columns - An optional parameter. If present, it will be used instead of the columns prop or the child column components.\n     */\n    ExcelExport.prototype.save = function (exportData, columns) {\n        this.toDataURL(exportData, columns).then(this.saveFile);\n    };\n    /**\n     * Returns a promise which will be resolved with the file data URI.\n     *\n     * @param exportData - The optional data or the [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that will be used to generate the data URI.\n     * @param externalColumns - The optional columns that will be used.\n     * @returns {Promise<string>} - The promise that will be resolved by the file data URI.\n     */\n    ExcelExport.prototype.toDataURL = function (exportData, columns) {\n        var options = isWorkbookOptions(exportData)\n            ? exportData\n            : this.workbookOptions(exportData, columns);\n        return toDataURL(options);\n    };\n    /**\n     * Based on the specified columns and data, returns [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).\n     *\n     * @param exportData - The optional data that will be exported.\n     * @param externalColumns - The optional columns that will be used.\n     * @returns {WorkbookOptions} - The workbook options.\n     */\n    // tslint:enable:max-line-length\n    ExcelExport.prototype.workbookOptions = function (exportData, externalColumns) {\n        var currentData = this.getExportData(exportData);\n        var children = this.props.children;\n        var gridColumns = children && children.type &&\n            children.type.displayName === 'KendoReactGrid' &&\n            children.props && React.Children.toArray(children.props.children);\n        var columns = this.extractColumns(gridColumns ||\n            externalColumns ||\n            this.props.columns ||\n            React.Children.toArray(children));\n        var options = workbookOptions({\n            columns: columns,\n            data: currentData.data,\n            group: currentData.group,\n            filterable: this.props.filterable,\n            creator: this.props.creator,\n            date: this.props.date,\n            dir: this.props.dir,\n            paddingCellOptions: this.props.paddingCellOptions,\n            headerPaddingCellOptions: this.props.headerPaddingCellOptions\n        });\n        return options;\n    };\n    /**\n     * @hidden\n     */\n    ExcelExport.prototype.render = function () {\n        return this.props.children || null;\n    };\n    /**\n     * @hidden\n     */\n    ExcelExport.propTypes = {\n        children: PropTypes.any,\n        columns: PropTypes.arrayOf(PropTypes.any),\n        creator: PropTypes.string,\n        data: PropTypes.any,\n        date: PropTypes.any,\n        filterable: PropTypes.bool,\n        fileName: PropTypes.string,\n        forceProxy: PropTypes.bool,\n        group: PropTypes.any,\n        headerPaddingCellOptions: PropTypes.any,\n        paddingCellOptions: PropTypes.any,\n        proxyURL: PropTypes.string,\n        dir: PropTypes.string\n    };\n    /**\n     * @hidden\n     */\n    ExcelExport.defaultProps = {\n        fileName: 'Export.xlsx',\n        forceProxy: false\n    };\n    return ExcelExport;\n}(React.Component));\nexport default ExcelExport;\n//# sourceMappingURL=ExcelExport.js.map"]},"metadata":{},"sourceType":"module"}