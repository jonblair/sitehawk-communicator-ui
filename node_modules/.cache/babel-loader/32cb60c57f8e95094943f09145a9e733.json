{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jblair\\\\Desktop\\\\React\\\\sitehawk-communicator-ui\\\\src\\\\components\\\\chemical-area-ledger\\\\chemical-area-ledger.js\";\nimport React from \"react\";\nimport \"../chemical-area-ledger/chemical-area-ledger.css\";\nimport \"../../styles/ledgers/ledgers.css\";\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nclass ChemicalAreaLedger extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chemicalAreas: [],\n      chemicalAreasHierarchy: []\n    };\n  }\n\n  componentDidMount() {\n    this.getChemicalAreas(233, 1, 100);\n  }\n\n  async getChemicalAreas(facilityId, pageIndex, pageSize) {\n    await fetch(`/api/v1/Facility/${facilityId}/ChemicalAreas?pageIndex=${pageIndex}&pageSize=${pageSize}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + localStorage.getItem('token'),\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      var parents = data.filter(function (item) {\n        return item.parentChemicalAreaId === 0;\n      });\n      var treeviewData = parents;\n      var children = data.filter(function (item) {\n        return item.parentChemicalAreaId > 0;\n      });\n      treeviewData.forEach(parent => {\n        children.forEach(child => {\n          if (child.parentChemicalAreaId === parent.id) {\n            parent.items = child;\n          }\n        });\n      }); //console.log(treeviewData)\n\n      this.setState({\n        chemicalAreas: data,\n        chemicalAreaTreeView: treeviewData\n      });\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }\n\n  render() {\n    // const chemicalAreasList = this.state.chemicalAreas.map((myChemicalArea, index) => (\n    //   <p key={index}>{myChemicalArea.name}</p>\n    // ))\n    // function ChemicalAreaAccoridan(props) {\n    //   return (\n    //     <Accordion defaultActiveKey=\"0\">\n    //       <Card>\n    //         <Card.Header>\n    //           <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n    //             Click me!\n    //           </Accordion.Toggle>\n    //         </Card.Header>\n    //         <Accordion.Collapse eventKey=\"0\">\n    //           <Card.Body>Hello! I'm the body</Card.Body>\n    //         </Accordion.Collapse>\n    //       </Card>\n    //       <Card>\n    //         <Card.Header>\n    //           <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n    //             Click me!\n    //           </Accordion.Toggle>\n    //         </Card.Header>\n    //         <Accordion.Collapse eventKey=\"1\">\n    //           <Card.Body>Hello! I'm another body</Card.Body>\n    //         </Accordion.Collapse>\n    //       </Card>\n    //     </Accordion>\n    //   )\n    // }\n    function ChemicalAreaCards(props) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, props.chemicalAreas.map((myChemicalArea, index) => React.createElement(\"div\", {\n        key: index,\n        className: \"card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"card-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, myChemicalArea.name), React.createElement(\"h6\", {\n        className: \"card-subtitle mb-2 text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, myChemicalArea.description), React.createElement(\"p\", {\n        className: \"card-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Use: \", myChemicalArea.areaOfUse.areaOfUse)))));\n    }\n\n    function chemicalAreaTreeView(props) {\n      onItemClick = event => {\n        event.item.selected = !event.item.selected;\n        this.forceUpdate();\n      };\n\n      onExpandChange = event => {\n        event.item.expanded = !event.item.expanded;\n        this.forceUpdate();\n      };\n\n      return React.createElement(TreeView, {\n        data: props.chemicalAreasTreeViewData,\n        expandIcons: true,\n        onExpandChange: this.onExpandChange,\n        onItemClick: this.onItemClick,\n        \"aria-multiselectable\": true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"chemicalAreaLedgerHeader\",\n      className: \"ledgerTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Chemical Area Ledger\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"chemicalAreaTreeView\", {\n      chemicalAreas: this.state.chemicalAreaTreeView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(ChemicalAreaCards, {\n      chemicalAreasTreeViewData: this.state.chemicalAreas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default ChemicalAreaLedger;","map":{"version":3,"sources":["C:/Users/jblair/Desktop/React/sitehawk-communicator-ui/src/components/chemical-area-ledger/chemical-area-ledger.js"],"names":["React","ChemicalAreaLedger","Component","constructor","props","state","chemicalAreas","chemicalAreasHierarchy","componentDidMount","getChemicalAreas","facilityId","pageIndex","pageSize","fetch","method","headers","localStorage","getItem","then","response","json","data","parents","filter","item","parentChemicalAreaId","treeviewData","children","forEach","parent","child","id","items","setState","chemicalAreaTreeView","catch","error","console","render","ChemicalAreaCards","map","myChemicalArea","index","name","description","areaOfUse","onItemClick","event","selected","forceUpdate","onExpandChange","expanded","chemicalAreasTreeViewData"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport \"../chemical-area-ledger/chemical-area-ledger.css\";\r\nimport \"../../styles/ledgers/ledgers.css\";\r\nimport \"../../../node_modules/bootstrap/dist/css/bootstrap.min.css\"\r\n\r\nclass ChemicalAreaLedger extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      chemicalAreas: [],\r\n      chemicalAreasHierarchy: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getChemicalAreas(233, 1, 100);\r\n  }\r\n\r\n  async getChemicalAreas(facilityId, pageIndex, pageSize) {\r\n    await fetch(`/api/v1/Facility/${facilityId}/ChemicalAreas?pageIndex=${pageIndex}&pageSize=${pageSize}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('token'),\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      var parents = data.filter(function (item) {\r\n        return item.parentChemicalAreaId === 0;\r\n      });\r\n      var treeviewData = parents;\r\n\r\n      var children = data.filter(function (item) {\r\n        return item.parentChemicalAreaId > 0;\r\n      });\r\n\r\n      treeviewData.forEach(parent => {\r\n        children.forEach(child => {\r\n          if (child.parentChemicalAreaId === parent.id) {\r\n            parent.items = child;\r\n          }\r\n        });\r\n      });\r\n\r\n      //console.log(treeviewData)\r\n\r\n      this.setState({\r\n        chemicalAreas: data,\r\n        chemicalAreaTreeView: treeviewData,\r\n      })\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error:', error);\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    // const chemicalAreasList = this.state.chemicalAreas.map((myChemicalArea, index) => (\r\n    //   <p key={index}>{myChemicalArea.name}</p>\r\n    // ))\r\n\r\n    // function ChemicalAreaAccoridan(props) {\r\n    //   return (\r\n    //     <Accordion defaultActiveKey=\"0\">\r\n    //       <Card>\r\n    //         <Card.Header>\r\n    //           <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n    //             Click me!\r\n    //           </Accordion.Toggle>\r\n    //         </Card.Header>\r\n    //         <Accordion.Collapse eventKey=\"0\">\r\n    //           <Card.Body>Hello! I'm the body</Card.Body>\r\n    //         </Accordion.Collapse>\r\n    //       </Card>\r\n    //       <Card>\r\n    //         <Card.Header>\r\n    //           <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\r\n    //             Click me!\r\n    //           </Accordion.Toggle>\r\n    //         </Card.Header>\r\n    //         <Accordion.Collapse eventKey=\"1\">\r\n    //           <Card.Body>Hello! I'm another body</Card.Body>\r\n    //         </Accordion.Collapse>\r\n    //       </Card>\r\n    //     </Accordion>\r\n    //   )\r\n    // }\r\n\r\n    function ChemicalAreaCards(props) {\r\n      return (\r\n        <div>\r\n            {props.chemicalAreas.map((myChemicalArea, index) => (\r\n              <div key={index} className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">{myChemicalArea.name}</h5>\r\n                  <h6 className=\"card-subtitle mb-2 text-muted\">{myChemicalArea.description}</h6>\r\n                  <p className=\"card-text\">Use: {myChemicalArea.areaOfUse.areaOfUse}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n    function chemicalAreaTreeView(props) {\r\n      onItemClick = (event) => {\r\n          event.item.selected = !event.item.selected;\r\n          this.forceUpdate();\r\n      }\r\n      onExpandChange = (event) => {\r\n          event.item.expanded = !event.item.expanded;\r\n          this.forceUpdate();\r\n      }\r\n\r\n      return (\r\n        <TreeView\r\n            data={props.chemicalAreasTreeViewData}\r\n            expandIcons={true}\r\n            onExpandChange={this.onExpandChange}\r\n            onItemClick={this.onItemClick}\r\n            aria-multiselectable={true}\r\n        />\r\n      )\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n        <div id=\"chemicalAreaLedgerHeader\" className=\"ledgerTitle\">Chemical Area Ledger</div>\r\n        <br/>\r\n        <div>\r\n        <chemicalAreaTreeView chemicalAreas={this.state.chemicalAreaTreeView} />\r\n          <ChemicalAreaCards chemicalAreasTreeViewData={this.state.chemicalAreas} />\r\n        </div>  \r\n        </div>\r\n    )\r\n  }\r\n} \r\n\r\nexport default ChemicalAreaLedger;"]},"metadata":{},"sourceType":"module"}